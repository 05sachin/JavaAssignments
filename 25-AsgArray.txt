                                   Assignment- TimeAndSpace Complexity

Q.1- Analyze the time complexity of the following Java code and suggest a way to improve it: 
int sum=0;
for(int i=1;i<=n;i++){
    for(int j=1;j<=i;j++){
        sum++;
    }
}

Ans- The time complexity of this code is O(n^2) as it uses nested loops, where the outer loop runs n times and the inner loop runs i times where i varies from 1 to n.
The total number of operations performed can be calculated by summing the total number of operations in each iteration of the outer loop. The inner loop will run i times on the i-th iteration of the outer loop. So the number of operations is (1+2+3+...+n) which is n(n+1)/2, which is O(n^2).

One way to improve the time complexity of this code is to use a mathematical formula to find the sum instead of using nested loops.

Q.2: Find the value of T(2) for the recurrence relation T(n) = 3T(n-1) + 12n, given that T(0) = 5. 
Ans- 
Substituting the values in the relation:

T(1) = 3T(0) + 12
=> T(1) = 15 + 12 = 27

T(2) = 3T(1) + 12 * 2
=>T(2) = 3 * 27 + 24 = 81 + 24

Hence T(2) = 105.

Q.3: Given a recurrence relation, solve it using a substitution method. 

 Relation : T(n) = T(n - 1) + c 
Ans-
Let the solution be T(n) = O(n), now let’s prove this using the induction method.


For that to happen T(n) <= cn where c is some constant.

T(n) = T(n - 1) + c

T(n - 1) = T(n - 2) + c

T(n - 2) = T(n - 3) + c

|

|

T(2) = T(1) + c

—-Adding all above equations

T(n) = T(1) + cn

Let us assume T(1) to be a constant value.

T(n) = k + cn

Therefore, T(n) <= cn

Hence we can conclude T(n) = O(n)

Q.4: Given a recurrence relation: 

 T(n) = 16T(n/4) + n2logn 

 Find the time complexity of this relation using the master theorem. 
Ans- 
From the given recurrence relation we can obtain the value of different parameters such as a,b,p,and
k.

The relation:T(n)=16T(n/4)+n^2logn

Here,a=16,b=4,k=2,p=1

b^k=42=16

Here a=b^k ,Also p>-1

Hence T(n)=θ(nlogba*log^(p+1)n)

Therefore T(n)=θ(nlog416*log^(1+1)n)=θ(2nlog2n)

Q.5: Solve the following recurrence relation using recursion tree method T(n) = 2T(n/2) + n 
Ans-
Step- 1:
 The given recurrence relation shows-
A problem of size n will get divided into 2 sub-problems of size n/2.
Then, each sub-problem of size n/2 will get divided into 2 sub-problems of size n/4 and so on.
At the bottom most layer, the size of sub-problems will reduce to 1.
                  T(n)
                  /  \
              T(n/2)  T(n/2)
               /  \    /  \
              so on...
The given recurrence relation shows-

The cost of dividing a problem of size n into its 2 sub-problems and then combining its solution is n.
The cost of dividing a problem of size n/2 into its 2 sub-problems and then combining its solution is n/2 and so on.
                     n           level 0
                  /    \
                n/2     n/2     level 1
               /  \     /  \
              n/4 n/4  n/4 n/4
                     |
                     |    
Step-02:
 

Determine cost of each level-

Cost of level-0 = n
Cost of level-1 = n/2 + n/2 = n
Cost of level-2 = n/4 + n/4 + n/4 + n/4 = n and so on.
 

Step-03:
 

Determine total number of levels in the recursion tree-

Size of sub-problem at level-0 = n/20
Size of sub-problem at level-1 = n/21
Size of sub-problem at level-2 = n/22
 

Continuing in similar manner, we have-

Size of sub-problem at level-i = n/2i

Suppose at level-x (last level), size of sub-problem becomes 1. Then-

n / 2x = 1

2x = n

Taking log on both sides, we get-

xlog2 = logn

x = log2n

 

∴ Total number of levels in the recursion tree = log2n + 1 
Step-04:
 

Determine number of nodes in the last level-

Level-0 has 20 nodes i.e. 1 node
Level-1 has 21 nodes i.e. 2 nodes
Level-2 has 22 nodes i.e. 4 nodes
 

Continuing in similar manner, we have-

Level-log2n has 2log2n nodes i.e. n nodes

 

Step-05:
 

Determine cost of last level-

Cost of last level = n x T(1) = θ(n)

 

Step-06:
 

Add costs of all the levels of the recursion tree and simplify the expression so obtained in terms of asymptotic notation-
T(n) = {n+n+n+.......log2n times}+ θ (n)
= n x log2n + θ (n)
= nlog2n + θ (n)
= θ (nlog2n) ans


Q.6. T(n) = 2T(n/2) + K, Solve using Recurrence tree method.                   
Ans- 
Step 1:Drawing Recursion Tree

                   T(n)            level 0
                  /    \
              T(n/2)    T(n/2)     level 1
              /    \    /    \
         T(n/4) T(n/4) T(n/4) T(n/4) level 2
           /  \   /  \  /  \   /  \

                   |
                   |

                   |
so on..


Step2: Calculating height of tree

As we know that (n/2^k) =1

n = 2^K

Taking log both sides

log(n) = log(2^k)

log(n) = klog(2)

k = log(n)/log(2)

k = log2(n)

Height of tree is log(n) base 2


Step3. Calculate cost at each level

Level 0 = K

Level 1 = K + K = 2K

Level 2 = K + K + K + K= 4K and so on

Step 4. Calculate number of nodes at each level

Level 0 = 2^0 = 1

Level 1 = 2^1 = 2

Level 2 = 2^2 = 4 and so on…


Step 5. Calculating final cost:

The total cost can be written as,


Total Cost = Cost of all levels except last level + Cost of last level

Total Cost = Cost for level-0 + Cost for level-1 + Cost for level-2 + .... + Cost for level-log(n) + Cost for last level


The cost of the last level is calculated separately because it is the base case and no merging is done at the last 
level so, the cost to solve a single problem at this level is some constant value. Let's take it as O(1)
Let's put the values into the formulae,

T(n) = K + 2*K + 4*K + .... + log(n) times + O(1) * n

T(n) = K(1 + 2 + 4 + .... + log(n) times) + O(n)

T(n) = K(2^0 + 2^1 + 2^2 + ....+ log(n) times + O(n)


In the GP formed above, a = 1 and r = 2, after solving this we get, T(n) = K * (1 / (2 - 1)) + O(n)

T(n) = K + O(n)

T(n) = O(n)


                                   Assignment- 1D Array

Q.1-
/* Write a program to print the sum of all the elements present on even indices in the given array.

Input 1: arr[] = {3,20,4,6,9}

Output 1: 16


Input 1: arr[] = {4,3,6,7,1}

Output 1: 11 */

import java.util.Scanner;

public class A_SumofEvenIndEle{
    public static int sumofEvenIndEle(int[] arr,int n){
        int sum=0;
        for(int i=0;i<n;i+=2){
            sum+=arr[i];
        }
        return sum;
    }
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int result = sumofEvenIndEle(arr, n);
        System.out.println("output : "+result);
        sc.close();
    }
}

Q.2- 
/*Write a program to traverse over the elements of the array using for each loop and print all even 
elements.

Input 1: arr[] = {34,21,54,65,43}

Output 1: 34 54 


Input 1: arr[] = {4,3,6,7,1}

Output 1: 4 6 */

import java.util.*;

public class B_EvenElements {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }

        //all even elements
        
        for (int i : arr) {
            if(i%2==0){
                System.out.println(i);
            }
        }
        sc.close();
    }
}
 
Q.3- 
/*Write a program to calculate the maximum element in the array.

Input 1: arr[] = {34,21,54,65,43}

Output 1: 65


Input 1: arr[] = {4,3,6,7,1}

Output 1: 7 */

import java.util.*;

public class C_MaxEle {
   
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int max=Integer.Min_Value;
        for(int i=0;i<n;i++){
            max = Math.max(max,arr[i]);
        }

        System.out.println("output : "+max);
        sc.close();
    }
}

Q.4- 
/* Write a program to find out the second largest element in a given array. 

Input 1: arr[] = {34,21,54,65,43}

Output 1: 54


Input 1: arr[] = {4,3,6,7,1}

Output 1: 6 */
import java.util.*;
public class D_SecondLargestEle {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        // second largest element
        
        int smax=Integer.Min_Value;
        int max=Integer.Min_Value;
        for(int i=0;i<n;i++){
            if(arr[i]>max){
                smax=max;
                max=arr[i];
            }
            else if(arr[i]>smax){
                smax=arr[i];
            }
        }

        System.out.println("output : "+smax);
        sc.close();
    }
}

Q.5- 
/*Given an array. Find the first peak element in the array. A peak element is an element that is greater than 
its just left and just right neighbor.


Input 1: arr[] = {1,3,2,6,5}

Output 1: 6


Input 2:  arr[] = {1 4,7,3,2,6,5}

Output 1: 7 */
import java.util.*;
public class E_PeakEle {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        // peak element

        int peakEle =Integer.Min_Value;

        for(int i=1;i<n-1;i++){
            int val = arr[i];
            if(val>arr[i-1] && val>arr[i+1] && peakEle<val){
                peakEle = val;
            }
        }

        System.out.println("output : "+peakEle);
        sc.close();
    }
}
                                      
                                    Assignment - 2D Array

Q.1-
/* Take m and n input from the user and m * n integer inputs from user and print the following:			 
number of positive numbers
number of negative numbers
number of odd numbers
number of even numbers
number of 0.
Input 1: 
1 2 -3 4
0 0 -4 2
1 -1 2 3
-4 -5 -7 0
Output :
number of positive numbers = 7
number of negative numbers = 6
number of odd numbers = 7
number of even numbers = 9
number of 0 = 3 */
import java.util.*;
public class A_Print{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();

        int[][] mtr = new int[m][n];

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                mtr[i][j] = sc.nextInt();
            }
        }

        int posCnt=0,negCnt=0,oddCnt=0,evenCnt=0,zeroCnt=0;

        for(int[] arr:mtr){
            for(int x:arr){
                if(x==0) zeroCnt++;
                else if(x>0) posCnt++;
                else negCnt++;
                
                if(x%2==0) evenCnt++;
                else oddCnt++;

            }
        }

        System.out.println("output : ");
        System.out.println("number of positive numbers = " +posCnt);
        System.out.println("number of negative numbers = " +negCnt);
        System.out.println("number of odd numbers = " +oddCnt);
        System.out.println("number of even numbers = " +evenCnt);
        System.out.println("number of 0 = " +zeroCnt);
        sc.close();

    }
}

Q.2-
/* write a program to print the elements above the secondary diagonal in a user inputted 
square matrix.		
1 2 3
4 5 6
7 8 9
 output :
 1 2 4
*/
import java.util.*;
public class B_EleAboveSecDiag {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();

        int[][] mtr = new int[m][m];

        for(int i=0;i<m;i++){
            for(int j=0;j<m;j++){
                mtr[i][j] = sc.nextInt();
            }
        }
        System.out.println("output : ");
        for(int i=0;i<m;i++){
            for(int j=0;j<m-i-1;j++){
                System.out.print(mtr[i][j]+" ");
            }
        }
        sc.close();

    }
}

Q.3-
/* write a program to print the elements of both the diagonals in a user inputted square matrix 
in any order.
1 2 3
4 5 6
7 8 9
output :
1 3 5 7 9
 */
import java.util.*;
public class C_DiagonalsEle {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();

        int[][] mtr = new int[m][m];

        for(int i=0;i<m;i++){
            for(int j=0;j<m;j++){
                mtr[i][j] = sc.nextInt();
            }
        }
        System.out.println("output : ");
        for(int i=0;i<m;i++){
            System.out.print(mtr[i][i]+" ");
            if(i!=m-1-i){
                System.out.print(mtr[i][m-1-i]+" ");
            }
            /*for(int j=0;j<m;j++){
                if(i==j || i+j==m-1){
                    System.out.print(mtr[i][j]+" ");
                }
                
            }*/
        }
        sc.close();
    }
}

Q.4-
/*
 Write a program to find the largest element of a given 2D array of integers. 
input:
1 2 4 0
2 5 7 -1
4 2 6 9
output:
9
 */
import java.util.*;
public class D_LargestEle {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();
        int[][] mtr = new int[m][n];

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                mtr[i][j] = sc.nextInt();
            }
        }

        int l=Integer.MIN_VALUE;

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                l = Math.max(l,mtr[i][j]);
            }
        }

        System.out.println("output : "+l);
        sc.close();



    }
}

Q.5-
/* Write a function which accepts a 2D array of integers and its size as arguments and 
 displays the elements of middle row and the elements of middle column. Printing can 
be done in any order.
[Assuming the 2D Array to be a square matrix with odd dimensions i.e. 3x3, 5x5, 7x7 etc...]
Input 1: 
1 2 3 4 5
3 4 5 6 7
7 6 5 4 3
8 7 6 5 4
1 2 37 8 0
Output : 3 5 5 6 37 7 6 4 3 */
import java.util.*;
public class E_MiddleRowAndColELe {
    public static void print(int[][] mtr , int m){
        for(int i=0;i<m;i++){
            System.out.print(mtr[i][m/2]+" ");
        }
        for(int j=0;j<m;j++){
            if(j==m/2) continue;
            System.out.print(mtr[m/2][j]+" ");
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        
        int[][] mtr = new int[m][m];

        for(int i=0;i<m;i++){
            for(int j=0;j<m;j++){
                mtr[i][j] = sc.nextInt();
            }
        }
        System.out.println("output : ");
        print(mtr, m);
        sc.close();
    }
}


